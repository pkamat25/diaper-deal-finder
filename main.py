"""
AutoGen Diaper Deal Finder
Automated diaper deal search using AutoGen and LangChain
"""
import asyncio
from io import BytesIO
import requests
import os
from autogen_agentchat.messages import TextMessage, MultiModalMessage
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_agentchat.agents import AssistantAgent
from autogen_core import CancellationToken
from dotenv import load_dotenv
# LangChain tool integration
from autogen_ext.tools.langchain import LangChainToolAdapter
from langchain_community.utilities import GoogleSerperAPIWrapper
from langchain_community.agent_toolkits import FileManagementToolkit
from langchain.agents import Tool
# Load environment variables
load_dotenv(override=True)

async def main():
    """Main function to run diaper deal search"""
    
    # Updated prompt - removed file writing instruction
    prompt = """Your task is to find REAL DISCOUNTS and SPECIALS on Size 3 baby nappies from Australian supermarkets Coles and Woolworths.

üá¶üá∫ AUSTRALIAN SEARCH STRATEGY:
STEP 1 - SEARCH COLES SPECIALS:
Search these exact terms:
- "site:coles.com.au baby nappies size 3 special"
- "Coles catalogue baby nappies half price"
- "Coles Down Down baby nappies specials"
Look for: Red "Special" tags, Yellow "Down Down" pricing, "Was $X Now $Y"

STEP 2 - SEARCH WOOLWORTHS SPECIALS:
Search these exact terms:
- "site:woolworths.com.au baby nappies size 3 special"  
- "Woolworths catalogue baby nappies low price"
- "Woolworths baby nappies % off discount"
Look for: Red "Special" badges, Orange "Low Price" tags, Crossed-out prices

‚ö†Ô∏è CRITICAL VALIDATION:
- ONLY include products with CLEAR DISCOUNTS
- Original price MUST BE HIGHER than current price
- If prices same = NOT A DEAL
- Look for "Special", "Half Price", "% off", "Save $" badges

STEP 3: Present all findings in clear table format with these details: 
- Supermarket name
- Diaper brand and product Type
- Regular price
- Offer Price / Discounted Price  
- Pack size and price per diaper

STEP 4: **Highlight Best Deals**: Clearly indicate which brand and store offers the best value. For example, mention the lowest price per nappy followed by the supermarket where it's available.

Provide a comprehensive summary of all deals found, formatted nicely for a daily deals report."""

    # Setup tools (ONLY search tool, no file management)
    serper = GoogleSerperAPIWrapper()
    langchain_serper = Tool(name="internet_search", func=serper.run, description="useful for when you need to search the internet")
    autogen_serper = LangChainToolAdapter(langchain_serper)
    autogen_tools = [autogen_serper]
   
    # Print available tools 
    print(f"Available tools ({len(autogen_tools)}):")
    for tool in autogen_tools:
        print(f"  - {tool.name}: {tool.description}")
    
    # Setup agent 
    model_client = OpenAIChatCompletionClient(model="gpt-4o-mini")
    agent = AssistantAgent(name="searcher", model_client=model_client, tools=autogen_tools, reflect_on_tool_use=True)
    
    # Run the search 
    message = TextMessage(content=prompt, source="user")
    result = await agent.on_messages([message], cancellation_token=CancellationToken())
    
    # Capture agent's response and write to file
    agent_response = ""
    print("=== AGENT RESPONSES ===")
    for message in result.inner_messages:
        print(message.content)
        if isinstance(message.content, list):
        agent_response += "\n\n".join(message.content) + "\n\n"
        else:
        agent_response += str(message.content) + "\n\n"
    
    
    # Manually write the response to markdown file
    file_name = "diaper_everyday_deals.md"
    try:
        with open(file_name, "w", encoding="utf-8") as f:
            f.write("# Daily Diaper Deals - Automated Search Results\n\n")
            f.write(agent_response)
            f.write("\n---\n*Generated by automated deal finder*\n")
        print(f"‚úÖ Successfully wrote agent response to {file_name}")
    except Exception as e:
        print(f"‚ùå Error writing to file: {e}")
        # Fallback
        with open(file_name, "w", encoding="utf-8") as f:
            f.write("# Daily Diaper Deals - Error\n\n")
            f.write("Search completed but file writing encountered an error.\n")
            f.write("Check console output above for results.\n")
        print(f"‚úÖ Created fallback {file_name}")
    
    # Send email 
    from email_sender import send_diaper_deals
    send_diaper_deals()

# FIXED: Was **name** now __name__
if __name__ == "__main__":
    asyncio.run(main())
